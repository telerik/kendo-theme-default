// Add two
@function addTwo( $one, $two, $multiplier: 1 ) {
    $_unit-1: unit($one);
    $_unit-2: unit($two);

    $_one: $multiplier * $one;
    $_two: $multiplier * $two;

    // if all units are same type
    @if $_unit-1 == $_unit-2 {
        @return $_one + $_two;
    }

    // Fall back to calc
    @return calc( #{$_one} + #{$_two} );
}


@function addThree( $one, $two, $three, $multiplier: 1 ) {
    $_unit-1: unit($one);
    $_unit-2: unit($two);
    $_unit-3: unit($three);

    $_one: $multiplier * $one;
    $_two: $multiplier * $two;
    $_three: $multiplier * $three;

    // if all units are same type
    @if $_unit-1 == $_unit-2 == $_unit-3 {
        @return $_one + $_two + $_three;
    }

    // if $_unit-1 and $_unit-2 are same type
    @if $_unit-1 == $_unit-2 {
        @return calc( #{$_one + $_two} + #{$_three} );
    }

    // if $_unit-1 and $_unit-3 are same type
    @if $_unit-1 == $_unit-3 {
        @return calc( #{$_one + $_three} + #{$_two} );
    }

    // if $_unit-2 and $_unit-3 are same type
    @if $_unit-2 == $_unit-3 {
        @return calc( #{$_one} + #{$_two + $_three} );
    }

    // Fall back to calc
    @return calc( #{$_one} + #{$_two} + #{$_three} );
}


@function button-inner-size( $multiplier: 1 ) {
    $_unit-padding: unit($button-padding-y);
    $_unit-line-height: unit($form-line-height-em);

    $_padding: $multiplier * (2 * $button-padding-y);
    $_line-height: $multiplier * $form-line-height-em;

    // if all units are same type
    @if $_unit-padding == $_unit-line-height {
        @return $_padding + $_line-height;
    }

    // Fall back to calc
    @return calc( #{$_padding} + #{$_line-height} );
}


@function button-size( $multiplier: 1 ) {
    $_unit-border: unit(1px);
    $_unit-padding: unit($button-padding-y);
    $_unit-line-height: unit($form-line-height-em);

    $_border: $multiplier * ( 2 * 1px );
    $_padding: $multiplier * (2 * $button-padding-y);
    $_line-height: $multiplier * $form-line-height-em;

    // if all units are same type
    @if $_unit-border == $_unit-padding == $_unit-line-height {
        @return $_border + $_padding + $_line-height;
    }

    // if border and padding are same type
    @if $_unit-border == $_unit-padding {
        @return calc( #{$_border + $_padding} + #{$_line-height} );
    }

    // if border and line-height are same type
    @if $_unit-border == $_unit-line-height {
        @return calc( #{$_border + $_line-height} + #{$_padding} );
    }

    @if $_unit-padding == $_unit-line-height {
        @return calc( #{$_border} + #{$_padding + $_line-height} );
    }

    // Fall back to calc
    @return calc( #{$_border} + #{$_padding} + #{$_line-height} );
}




@function try-darken( $color, $amount, $threshold: black ) {
    $amount: if(unitless($amount), $amount, ($amount / 1%));

    $result: darken( $color, $amount );
    $alt-result: darken( $color, ($amount - 1) );

    @if ($result == $threshold) and ($alt-result == $threshold) {
        @return lighten( $color, $amount );
    }
    @return $result;
}

@function try-lighten( $color, $amount, $threshold: white ) {
    $amount: if(unitless($amount), $amount, ($amount / 1%));

    $result: lighten( $color, $amount );
    $alt-result: lighten( $color, ($amount - 1) );

    @if ($result == $threshold) and ($alt-result == $threshold) {
        @return darken( $color, $amount );
    }
    @return $result;
}


@function contrast($in, $black: #000000, $white: #ffffff) {
    $gray: red(grayscale($in));
    $out: if($gray > 128, $black, $white);
    @return $out;
}